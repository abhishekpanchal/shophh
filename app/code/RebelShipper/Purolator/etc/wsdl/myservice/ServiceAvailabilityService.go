package myservice

// Generated by https://github.com/hooklift/gowsdl
// Do not modify
// Copyright (c) 2015, Hooklift. All rights reserved.
import (
	"encoding/xml"
	"net/http"
	"time"

	gowsdl "github.com/hooklift/gowsdl/generator"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type Char int32

const ()

type Duration *Duration

const ()

type Guid string

const ()

type Language string

const (

	// en
	LanguageEn Language = "en"

	// fr
	LanguageFr Language = "fr"
)

type ValueType string

const (

	// String
	ValueTypeString ValueType = "String"

	// Decimal
	ValueTypeDecimal ValueType = "Decimal"

	// DateTime
	ValueTypeDateTime ValueType = "DateTime"

	// Enumeration
	ValueTypeEnumeration ValueType = "Enumeration"
)

type WeightUnit string

const (

	// lb
	WeightUnitLb WeightUnit = "lb"

	// kg
	WeightUnitKg WeightUnit = "kg"
)

type DimensionUnit string

const (

	// in
	DimensionUnitIn DimensionUnit = "in"

	// cm
	DimensionUnitCm DimensionUnit = "cm"
)

type GetServicesOptionsRequestContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 GetServicesOptionsRequestContainer"`

	*RequestContainer

	// BillingAccountNumber - string
	BillingAccountNumber string `xml:"BillingAccountNumber,omitempty"`

	// SenderAddress - Address
	SenderAddress *ShortAddress `xml:"SenderAddress,omitempty"`

	// ReceiverAddress - Address
	ReceiverAddress *ShortAddress `xml:"ReceiverAddress,omitempty"`

	// ShipmentDate - string
	ShipmentDate string `xml:"ShipmentDate,omitempty"`
}

type RequestContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 RequestContainer"`
}

type ShortAddress struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ShortAddress"`

	// City - string
	City string `xml:"City,omitempty"`

	// Province - string
	Province string `xml:"Province,omitempty"`

	// Country - string
	Country string `xml:"Country,omitempty"`

	// PostalCode; - string
	PostalCode string `xml:"PostalCode,omitempty"`
}

type RequestContext struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 RequestContext"`

	// Version - string
	Version string `xml:"Version,omitempty"`

	// Language - string
	Language *Language `xml:"Language,omitempty"`

	// GroupID - string
	GroupID string `xml:"GroupID,omitempty"`

	// RequestReference - string
	RequestReference string `xml:"RequestReference,omitempty"`

	// UserToken - string
	UserToken string `xml:"UserToken,omitempty"`
}

type GetServicesOptionsResponseContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 GetServicesOptionsResponseContainer"`

	*ResponseContainer

	// Services - Service[]
	Services *ArrayOfService `xml:"Services,omitempty"`
}

type ResponseContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ResponseContainer"`

	// ResponseInformation - ResponseInformation
	ResponseInformation *ResponseInformation `xml:"ResponseInformation,omitempty"`
}

type ResponseInformation struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ResponseInformation"`

	// Errors - Error[]
	Errors *ArrayOfError `xml:"Errors,omitempty"`

	// InformationalMessages - InformationalMessage[]
	InformationalMessages *ArrayOfInformationalMessage `xml:"InformationalMessages,omitempty"`
}

type ArrayOfError struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfError"`

	Error []*Error `xml:"Error,omitempty"`
}

type Error struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 Error"`

	// Code - string
	Code string `xml:"Code,omitempty"`

	// Description - string
	Description string `xml:"Description,omitempty"`

	// AdditionalInformation - string
	AdditionalInformation string `xml:"AdditionalInformation,omitempty"`
}

type ArrayOfInformationalMessage struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfInformationalMessage"`

	InformationalMessage []*InformationalMessage `xml:"InformationalMessage,omitempty"`
}

type InformationalMessage struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 InformationalMessage"`

	// Code - string
	Code string `xml:"Code,omitempty"`

	// Message - string
	Message string `xml:"Message,omitempty"`
}

type ArrayOfService struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfService"`

	Service []*Service `xml:"Service,omitempty"`
}

type Service struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 Service"`

	// ID - string
	ID string `xml:"ID,omitempty"`

	// Description - string
	Description string `xml:"Description,omitempty"`

	// PackageType - string
	PackageType string `xml:"PackageType,omitempty"`

	// PackageTypeDescription - string
	PackageTypeDescription string `xml:"PackageTypeDescription,omitempty"`

	// Options - Option[]
	Options *ArrayOfOption `xml:"Options,omitempty"`
}

type ArrayOfOption struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfOption"`

	Option []*Option `xml:"Option,omitempty"`
}

type Option struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 Option"`

	// ID - string
	ID string `xml:"ID,omitempty"`

	// Description - string
	Description string `xml:"Description,omitempty"`

	// ValueType - ValueType
	ValueType *ValueType `xml:"ValueType,omitempty"`

	// AvailableForPieces - bool
	AvailableForPieces bool `xml:"AvailableForPieces,omitempty"`

	// PossibleValues - OptionValue[]
	PossibleValues *ArrayOfOptionValue `xml:"PossibleValues,omitempty"`

	// ChildServiceOptions - Option[]
	ChildServiceOptions *ArrayOfOption `xml:"ChildServiceOptions,omitempty"`
}

type ArrayOfOptionValue struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfOptionValue"`

	OptionValue []*OptionValue `xml:"OptionValue,omitempty"`
}

type OptionValue struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 OptionValue"`

	// Value - string
	Value string `xml:"Value,omitempty"`

	// Description - string
	Description string `xml:"Description,omitempty"`
}

type ResponseContext struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ResponseContext"`

	// ResponseReference - string
	ResponseReference string `xml:"ResponseReference,omitempty"`
}

type GetServiceRulesRequestContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 GetServiceRulesRequestContainer"`

	*RequestContainer

	// BillingAccountNumber - string
	BillingAccountNumber string `xml:"BillingAccountNumber,omitempty"`

	// SenderAddress - Address
	SenderAddress *ShortAddress `xml:"SenderAddress,omitempty"`

	// ReceiverAddress - Address
	ReceiverAddress *ShortAddress `xml:"ReceiverAddress,omitempty"`
}

type GetServiceRulesResponseContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 GetServiceRulesResponseContainer"`

	*ResponseContainer

	// ServiceRules - ServiceRules[]
	ServiceRules *ArrayOfServiceRule `xml:"ServiceRules,omitempty"`

	// ServiceOptionRules - ServiceOptionRules[]
	ServiceOptionRules *ArrayOfServiceOptionRules `xml:"ServiceOptionRules,omitempty"`

	// OptionRules - OptionRule[]
	OptionRules *ArrayOfOptionRule `xml:"OptionRules,omitempty"`
}

type ArrayOfServiceRule struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfServiceRule"`

	ServiceRule []*ServiceRule `xml:"ServiceRule,omitempty"`
}

type ServiceRule struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ServiceRule"`

	// ServiceID - string
	ServiceID string `xml:"ServiceID,omitempty"`

	// MinimumTotalPieces - int
	MinimumTotalPieces int32 `xml:"MinimumTotalPieces,omitempty"`

	// MaximumTotalPieces - int
	MaximumTotalPieces int32 `xml:"MaximumTotalPieces,omitempty"`

	// MinimumTotalWeight - Weight
	MinimumTotalWeight *Weight `xml:"MinimumTotalWeight,omitempty"`

	// MaximumTotalWeight - Weight
	MaximumTotalWeight *Weight `xml:"MaximumTotalWeight,omitempty"`

	// MinimumPieceWeight - Weight
	MinimumPieceWeight *Weight `xml:"MinimumPieceWeight,omitempty"`

	// MaximumPieceWeight - Weight
	MaximumPieceWeight *Weight `xml:"MaximumPieceWeight,omitempty"`

	// MinimumPieceLength - Dimension
	MinimumPieceLength *Dimension `xml:"MinimumPieceLength,omitempty"`

	// MaximumPieceLength - Dimension
	MaximumPieceLength *Dimension `xml:"MaximumPieceLength,omitempty"`

	// MinimumPieceWidth - Dimension
	MinimumPieceWidth *Dimension `xml:"MinimumPieceWidth,omitempty"`

	// MaximumPieceWidth - Dimension
	MaximumPieceWidth *Dimension `xml:"MaximumPieceWidth,omitempty"`

	// MinimumPieceHeight - Dimension
	MinimumPieceHeight *Dimension `xml:"MinimumPieceHeight,omitempty"`

	// MaximumPieceHeight - Dimension
	MaximumPieceHeight *Dimension `xml:"MaximumPieceHeight,omitempty"`

	// MaximumSize - Size
	MaximumSize *Dimension `xml:"MaximumSize,omitempty"`

	// MaximumDeclaredValue - decimal
	MaximumDeclaredValue float64 `xml:"MaximumDeclaredValue,omitempty"`
}

type Weight struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 Weight"`

	// Value - decimal
	Value float64 `xml:"Value,omitempty"`

	// WeightUnit - WeightUnit
	WeightUnit *WeightUnit `xml:"WeightUnit,omitempty"`
}

type Dimension struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 Dimension"`

	// Value - decimal
	Value float64 `xml:"Value,omitempty"`

	// DimensionUnit - DimensionUnit
	DimensionUnit *DimensionUnit `xml:"DimensionUnit,omitempty"`
}

type ArrayOfServiceOptionRules struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfServiceOptionRules"`

	ServiceOptionRules []*ServiceOptionRules `xml:"ServiceOptionRules,omitempty"`
}

type ServiceOptionRules struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ServiceOptionRules"`

	// ServiceID - string
	ServiceID string `xml:"ServiceID,omitempty"`

	// Exclusions - OptionIDValuePair[]
	Exclusions *ArrayOfOptionIDValuePair `xml:"Exclusions,omitempty"`

	// Inclusions - OptionIDValuePair[]
	Inclusions *ArrayOfOptionIDValuePair `xml:"Inclusions,omitempty"`
}

type ArrayOfOptionIDValuePair struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfOptionIDValuePair"`

	OptionIDValuePair []*OptionIDValuePair `xml:"OptionIDValuePair,omitempty"`
}

type OptionIDValuePair struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 OptionIDValuePair"`

	// ID - string
	ID string `xml:"ID,omitempty"`

	// Value - string
	Value string `xml:"Value,omitempty"`
}

type ArrayOfOptionRule struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfOptionRule"`

	OptionRule []*OptionRule `xml:"OptionRule,omitempty"`
}

type OptionRule struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 OptionRule"`

	// OptionIDValuePair - OptionIDValuePair
	OptionIDValuePair *OptionIDValuePair `xml:"OptionIDValuePair,omitempty"`

	// Exclusions - OptionIDValuePair[]
	Exclusions *ArrayOfOptionIDValuePair `xml:"Exclusions,omitempty"`

	// Inclusions - OptionIDValuePair[]
	Inclusions *ArrayOfOptionIDValuePair `xml:"Inclusions,omitempty"`
}

type ValidateCityPostalCodeZipRequestContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ValidateCityPostalCodeZipRequestContainer"`

	*RequestContainer

	// SenderAddress - ShortAddress[]
	Addresses *ArrayOfShortAddress `xml:"Addresses,omitempty"`
}

type ArrayOfShortAddress struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfShortAddress"`

	ShortAddress []*ShortAddress `xml:"ShortAddress,omitempty"`
}

type ValidateCityPostalCodeZipResponseContainer struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ValidateCityPostalCodeZipResponseContainer"`

	*ResponseContainer

	// SuggestedAddresses - SuggestedAddress[]
	SuggestedAddresses *ArrayOfSuggestedAddress `xml:"SuggestedAddresses,omitempty"`
}

type ArrayOfSuggestedAddress struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfSuggestedAddress"`

	SuggestedAddress []*SuggestedAddress `xml:"SuggestedAddress,omitempty"`
}

type SuggestedAddress struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 SuggestedAddress"`

	// SuggestedAddress - ShortAddress
	Address *ShortAddress `xml:"Address,omitempty"`

	// ResponseInformation - ResponseInformation
	ResponseInformation *ResponseInformation `xml:"ResponseInformation,omitempty"`
}

type ValidationFault struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ValidationFault"`

	Details *ArrayOfValidationDetail `xml:"Details,omitempty"`
}

type ArrayOfValidationDetail struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ArrayOfValidationDetail"`

	ValidationDetail []*ValidationDetail `xml:"ValidationDetail,omitempty"`
}

type ValidationDetail struct {
	XMLName xml.Name `xml:"http://purolator.com/pws/service/v1 ValidationDetail"`

	// Get or set a name describing the location of the validation result.
	Key string `xml:"Key,omitempty"`

	// Get or set a message describing the validation failure.
	Message string `xml:"Message,omitempty"`

	// Get or set a value characterizing the fault.
	Tag string `xml:"Tag,omitempty"`
}

type ServiceAvailabilityServiceContract struct {
	client *gowsdl.SoapClient
}

func NewServiceAvailabilityServiceContract(url string, tls bool) *ServiceAvailabilityServiceContract {
	if url == "" {
		url = ""
	}
	client := gowsdl.NewSoapClient(url, tls)

	return &ServiceAvailabilityServiceContract{
		client: client,
	}
}

// Error can be either of the following types:
//
//   - ValidationFaultFault
/*
	GetServicesOptions
	@param request GetServicesOptionsRequest
	@return GetServicesOptionsResponse
*/
func (service *ServiceAvailabilityServiceContract) GetServicesOptions(request *GetServicesOptionsRequestContainer, header *gowsdl.SoapHeader, configureRequest func(*http.Request)) (*GetServicesOptionsResponseContainer, error) {
	response := &GetServicesOptionsResponseContainer{}
	err := service.client.Call("http://purolator.com/pws/service/v1/GetServicesOptions", request, response, header, configureRequest)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Error can be either of the following types:
//
//   - ValidationFaultFault
/*
	GetServiceRules
	@param request GetServiceRulesRequest
	@return GetServiceRulesResponse
*/
func (service *ServiceAvailabilityServiceContract) GetServiceRules(request *GetServiceRulesRequestContainer, header *gowsdl.SoapHeader, configureRequest func(*http.Request)) (*GetServiceRulesResponseContainer, error) {
	response := &GetServiceRulesResponseContainer{}
	err := service.client.Call("http://purolator.com/pws/service/v1/GetServiceRules", request, response, header, configureRequest)
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Error can be either of the following types:
//
//   - ValidationFaultFault
/*
	ValidateCityPostalCodeZip
	@param request ValidateCityPostalCodeZipRequest
	@return ValidateCityPostalCodeZipResponse
*/
func (service *ServiceAvailabilityServiceContract) ValidateCityPostalCodeZip(request *ValidateCityPostalCodeZipRequestContainer, header *gowsdl.SoapHeader, configureRequest func(*http.Request)) (*ValidateCityPostalCodeZipResponseContainer, error) {
	response := &ValidateCityPostalCodeZipResponseContainer{}
	err := service.client.Call("http://purolator.com/pws/service/v1/ValidateCityPostalCodeZip", request, response, header, configureRequest)
	if err != nil {
		return nil, err
	}

	return response, nil
}
